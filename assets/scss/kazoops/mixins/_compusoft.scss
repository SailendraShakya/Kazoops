@mixin transitions($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    transition: $transition;
}
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}
@mixin x_center {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
}
@mixin y_center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
}
@mixin vertical_center {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
}
@mixin xy_center {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
}
$baseFontSize: 16; // Based on HTML reset html { font-size: 62.5%; }
@function parseInt($n) {
    @return $n / ($n * 0 + 1);
}
@mixin rem($property, $values) {
    $px: ();
    $rem: ();
    $root: $baseFontSize;
    @each $value in $values {
        @if $value==0 or $value==auto {
            $px: append($px, $value);
            $rem: append($rem, $value);
        }
        @else if type-of($value)==number {
            $unit: unit($value);
            $val: parseInt($value);
            @if $unit=="px" {
                $px: append($px, $value);
                $rem: append($rem, ($val / $root + rem));
            }
            @if $unit=="rem" {
                $px: append($px, ($val * $root + px));
                $rem: append($rem, $value);
            }
        }
        @else {
            $px: append($px, $value);
            $rem: append($rem, $value);
        }
    }
    @if $px==$rem {
        #{$property}: $px;
    }
    @else {
        #{$property}: $px;
        #{$property}: $rem;
    }
}
@function rem($value) {
    $root: $baseFontSize;
    $val: parseInt($value);
    $return: ();
    @if unit($value)=="px" {
        $return: append($return, ($val / $root + rem));
    }
    @else {
        $return: append($return, ($val * $root + px));
    }
    @return $return;
}
@mixin ul {
    margin: 0;
    padding: 0;
}
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}